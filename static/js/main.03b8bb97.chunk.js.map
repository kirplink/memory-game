{"version":3,"sources":["components/Card.js","components/Game.js","App.js","index.js"],"names":["Card","react_default","a","createElement","class","onClick","this","props","src","image","alt","name","data-id","id","Component","Game","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","event","target","getAttribute","state","clicked","includes","setState","score","prevSate","concat","toConsumableArray","highScore","shuffle","array","t","i","m","length","Math","floor","random","message","_this2","className","character","map","data","components_Card","App","components_Game","ReactDOM","render","src_App","document","getElementById"],"mappings":"kNAsBeA,mLAhBX,OACEC,EAAAC,EAAAC,cAAA,OACEC,MAAM,2EACNC,QAASC,KAAKC,MAAMF,SAElBJ,EAAAC,EAAAC,cAAA,OACEC,MAAM,8BACNI,IAAKF,KAAKC,MAAME,MAChBC,IAAKJ,KAAKC,MAAMI,KAChBC,UAASN,KAAKC,MAAMM,aAbbC,oBC2EJC,cAxEb,SAAAA,EAAYR,GAAO,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAX,KAAAS,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAX,KAAAW,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAf,KAAMC,KASRe,YAAc,SAAAC,GACZ,IAAMV,EAAKU,EAAMC,OAAOC,aAAa,WACjCT,EAAKU,MAAMC,QAAQC,SAASf,GAC9BG,EAAKa,SAAS,CACVC,MAAO,EACPH,QAAS,KAEHX,EAAKU,MAAMC,QAAQC,SAASf,IACtCG,EAAKa,SAAS,SAAAE,GAAQ,MAAK,CACvBD,MAAOd,EAAKU,MAAMI,MAAQ,EAC1BH,QAAO,GAAAK,OAAAf,OAAAgB,EAAA,EAAAhB,CAAMc,EAASJ,SAAf,CAAwBd,MAC7B,WACIG,EAAKU,MAAMI,MAAQd,EAAKU,MAAMQ,WAC9BlB,EAAKa,SAAS,CACVK,UAAWlB,EAAKU,MAAMI,WAxBrBd,EAgCnBmB,QAAU,SAAAC,GAGR,IAFA,IAAsBC,EAAGC,EAArBC,EAAIH,EAAMI,OAEPD,GAELD,EAAIG,KAAKC,MAAMD,KAAKE,SAAWJ,KAE/BF,EAAID,EAAMG,GACVH,EAAMG,GAAKH,EAAME,GACjBF,EAAME,GAAKD,EAEb,OAAOD,GAzCPpB,EAAKU,MAAQ,CACXI,MAAO,EACPI,UAAW,EACXP,QAAS,GACTiB,QAAS,mEANM5B,wEA8CV,IAAA6B,EAAAvC,KACP,OACEL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAG2C,UAAU,SAASxC,KAAKoB,MAAMkB,SACjC3C,EAAAC,EAAAC,cAAA,OAAK2C,UAAU,SACb7C,EAAAC,EAAAC,cAAA,sBAAcG,KAAKoB,MAAMI,OACzB7B,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,2BAAmBG,KAAKoB,MAAMQ,YAEhCjC,EAAAC,EAAAC,cAAA,OAAK2C,UAAU,iCACZxC,KAAK6B,QAAQY,GAAWC,IAAI,SAAAC,GAC3B,OACEhD,EAAAC,EAAAC,cAAC+C,EAAD,CACE7C,QAASwC,EAAKvB,YACdb,MAAOwC,EAAKxC,MACZE,KAAMsC,EAAKtC,KACXE,GAAIoC,EAAKpC,gBA/DNC,aCOJqC,MARf,WACE,OACElD,EAAAC,EAAAC,cAAA,OAAK2C,UAAU,aACb7C,EAAAC,EAAAC,cAACiD,EAAD,cCDNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.03b8bb97.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Card extends Component {\r\n  \r\n  \r\n  render() {\r\n    return (\r\n      <div \r\n        class=\"col-md-3 mx-3 mb-4 p-2 blue lighten-3 rounded z-depth-2 grow pointer mt0\" \r\n        onClick={this.props.onClick}\r\n        >\r\n          <img \r\n            class=\"img-fluid rounded z-depth-1\" \r\n            src={this.props.image} \r\n            alt={this.props.name} \r\n            data-id={this.props.id} \r\n          />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"./Card\";\r\nimport character from \"./character.json\";\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      score: 0,\r\n      highScore: 0,\r\n      clicked: [],\r\n      message: \"See if you can click each member of the Bluth family only once!\"\r\n    };\r\n  }\r\n\r\n  handleClick = event => {\r\n    const id = event.target.getAttribute(\"data-id\");\r\n    if (this.state.clicked.includes(id)) {\r\n      this.setState({\r\n          score: 0,\r\n          clicked: []\r\n      })\r\n    } else if (!this.state.clicked.includes(id)) {\r\n      this.setState(prevSate => ({ \r\n          score: this.state.score + 1,\r\n          clicked: [...prevSate.clicked, id]\r\n        }), () => {\r\n            if (this.state.score > this.state.highScore) {\r\n                this.setState({\r\n                    highScore: this.state.score\r\n                })\r\n            }\r\n        });\r\n    }\r\n  };\r\n\r\n  //code from https://bost.ocks.org/mike/shuffle/\r\n  shuffle = array => {\r\n    var m = array.length, t, i;\r\n    // While there remain elements to shuffle…\r\n    while (m) {\r\n    // Pick a remaining element…\r\n      i = Math.floor(Math.random() * m--);\r\n    // And swap it with the current element.\r\n      t = array[m];\r\n      array[m] = array[i];\r\n      array[i] = t;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p className=\"h4 tc\">{this.state.message}</p>\r\n        <div className=\"h4 tc\">\r\n          <span>Score: {this.state.score}</span>\r\n          <span> | </span>\r\n          <span>High Score: {this.state.highScore}</span>\r\n        </div>\r\n        <div className=\"row justify-content-md-center\">\r\n          {this.shuffle(character).map(data => {\r\n            return (\r\n              <Card\r\n                onClick={this.handleClick}\r\n                image={data.image}\r\n                name={data.name}\r\n                id={data.id}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\nimport Game from \"./components/Game\"\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Game />\n    </div>\n  )\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}